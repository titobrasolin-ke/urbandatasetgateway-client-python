# coding: utf-8

"""
    UrbanDatasetGateway - OpenAPI 3.0

    This technical specification is one of the **Smart City Platform Specification (SCPS) for Interoperability Layer** [https://smartcityplatform.enea.it/#/en/specification/](https://smartcityplatform.enea.it/#/en/specification/)

    The version of the OpenAPI document: 1.0.0
    Contact: tito.brasolin@kerberos.energy
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from urbandatasetgateway_client.models.scps_urbandataset_schema20_urban_dataset_context_coordinates import ScpsUrbandatasetSchema20UrbanDatasetContextCoordinates
from urbandatasetgateway_client.models.scps_urbandataset_schema20_urban_dataset_context_producer import ScpsUrbandatasetSchema20UrbanDatasetContextProducer
from typing import Optional, Set
from typing_extensions import Self

class ScpsUrbandatasetSchema20UrbanDatasetContext(BaseModel):
    """
    ScpsUrbandatasetSchema20UrbanDatasetContext
    """ # noqa: E501
    producer: ScpsUrbandatasetSchema20UrbanDatasetContextProducer
    time_zone: StrictStr = Field(alias="timeZone")
    timestamp: Annotated[str, Field(strict=True)]
    coordinates: ScpsUrbandatasetSchema20UrbanDatasetContextCoordinates
    language: Optional[StrictStr] = None
    note: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["producer", "timeZone", "timestamp", "coordinates", "language", "note"]

    @field_validator('timestamp')
    def timestamp_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^(?:(?:(?=[02468][048]00|[13579][26]00|[0-9]{2}0[48]|[0-9]{2}[2468][048]|[0-9]{2}[13579][26])[0-9]{4})-(?:(?:01|03|05|07|08|10|12)-(?:[0-2][0-9]|3[0-1])|(?:04|06|09|11)-(?:[0-2][0-9]|30)|02-[0-2][0-9])|(?:(?![02468][048]00|[13579][26]00|[0-9]{2}0[48]|[0-9]{2}[2468][048]|[0-9]{2}[13579][26])[0-9]{4})-(?:(?:01|03|05|07|08|10|12)-(?:[0-2][0-9]|3[0-1])|(?:04|06|09|11)-(?:[0-2][0-9]|30)|02-(?:[0-1][0-9]|2[0-8])))T[0-2][0-9]:[0-5][0-9]:[0-5][0-9]$", value):
            raise ValueError(r"must validate the regular expression /^(?:(?:(?=[02468][048]00|[13579][26]00|[0-9]{2}0[48]|[0-9]{2}[2468][048]|[0-9]{2}[13579][26])[0-9]{4})-(?:(?:01|03|05|07|08|10|12)-(?:[0-2][0-9]|3[0-1])|(?:04|06|09|11)-(?:[0-2][0-9]|30)|02-[0-2][0-9])|(?:(?![02468][048]00|[13579][26]00|[0-9]{2}0[48]|[0-9]{2}[2468][048]|[0-9]{2}[13579][26])[0-9]{4})-(?:(?:01|03|05|07|08|10|12)-(?:[0-2][0-9]|3[0-1])|(?:04|06|09|11)-(?:[0-2][0-9]|30)|02-(?:[0-1][0-9]|2[0-8])))T[0-2][0-9]:[0-5][0-9]:[0-5][0-9]$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ScpsUrbandatasetSchema20UrbanDatasetContext from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of producer
        if self.producer:
            _dict['producer'] = self.producer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of coordinates
        if self.coordinates:
            _dict['coordinates'] = self.coordinates.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ScpsUrbandatasetSchema20UrbanDatasetContext from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "producer": ScpsUrbandatasetSchema20UrbanDatasetContextProducer.from_dict(obj["producer"]) if obj.get("producer") is not None else None,
            "timeZone": obj.get("timeZone"),
            "timestamp": obj.get("timestamp"),
            "coordinates": ScpsUrbandatasetSchema20UrbanDatasetContextCoordinates.from_dict(obj["coordinates"]) if obj.get("coordinates") is not None else None,
            "language": obj.get("language"),
            "note": obj.get("note")
        })
        return _obj


