# coding: utf-8

"""
    UrbanDatasetGateway - OpenAPI 3.0

    **Smart City Platform Specification (SCPS) for Interoperability Layer** [https://smartcityplatform.enea.it/#/en/specification/](https://smartcityplatform.enea.it/#/en/specification/)  **Smart City Platform Specification (SCPS) Communication 2.0** [https://smartcityplatform.enea.it/#/en/specification/communication/2.0/](https://smartcityplatform.enea.it/#/en/specification/communication/2.0/)

    The version of the OpenAPI document: 2.0.0
    Contact: tito.brasolin@kerberos.energy
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SearchingByPropertyRequest(BaseModel):
    """
    SearchingByPropertyRequest
    """ # noqa: E501
    resource_id: StrictStr = Field(description="Uniquely identifies an UrbanDataset produced by a specific Solution producer (syntax defined in the SCPS Collaboration 2.0)")
    property_name: StrictStr = Field(description="Name of the property being searched")
    property_value: StrictStr = Field(description="Value of the property being searched")
    period_start: Optional[StrictStr] = Field(default=None, description="Date and time from which you want to specify the start of a time interval.")
    period_end: Optional[StrictStr] = Field(default=None, description="Date and time from which you want to specify the end of a time interval.")
    center_latitude: Optional[StrictStr] = Field(default=None, description="Latitude of the center where space research will be carried out.")
    center_longitude: Optional[StrictStr] = Field(default=None, description="Longitude of the center on which space research will be carried out.")
    distance: Optional[StrictStr] = Field(default=None, description="Radius of the circle, in meters, on which space research will be carried out.")
    __properties: ClassVar[List[str]] = ["resource_id", "property_name", "property_value", "period_start", "period_end", "center_latitude", "center_longitude", "distance"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SearchingByPropertyRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SearchingByPropertyRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "resource_id": obj.get("resource_id"),
            "property_name": obj.get("property_name"),
            "property_value": obj.get("property_value"),
            "period_start": obj.get("period_start"),
            "period_end": obj.get("period_end"),
            "center_latitude": obj.get("center_latitude"),
            "center_longitude": obj.get("center_longitude"),
            "distance": obj.get("distance")
        })
        return _obj


