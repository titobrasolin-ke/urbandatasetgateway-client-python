# coding: utf-8

"""
    UrbanDatasetGateway - OpenAPI 3.0

    **Smart City Platform Specification (SCPS) for Interoperability Layer** [https://smartcityplatform.enea.it/#/en/specification/](https://smartcityplatform.enea.it/#/en/specification/)  **Smart City Platform Specification (SCPS) Communication 2.0** [https://smartcityplatform.enea.it/#/en/specification/communication/2.0/](https://smartcityplatform.enea.it/#/en/specification/communication/2.0/)

    The version of the OpenAPI document: 2.0.0
    Contact: tito.brasolin@kerberos.energy
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from urbandatasetgateway_client.api.urban_dataset_gateway_api import UrbanDatasetGatewayApi


class TestUrbanDatasetGatewayApi(unittest.TestCase):
    """UrbanDatasetGatewayApi unit test stubs"""

    def setUp(self) -> None:
        self.api = UrbanDatasetGatewayApi()

    def tearDown(self) -> None:
        pass

    def test_basic(self) -> None:
        """Test case for basic

        Request an UrbanDataset, through the REQUEST / RESPONSE call, providing the identifier of the resource
        """
        pass

    def test_deep_searching(self) -> None:
        """Test case for deep_searching

        Request an UrbanDataset through a REQUEST / RESPONSE call, providing the identifier of the resource, with a spatial-temporal refinement of the search at line level (elements of specification of the dataset value records, present in the format); with all optional parameters set to null, it achieves the same result as a basic Request
        """
        pass

    def test_delete(self) -> None:
        """Test case for delete

        Delete a particular UrbanDataset, providing the resource identifier and the specific generation timestamp
        """
        pass

    def test_is_alive(self) -> None:
        """Test case for is_alive

        Verify that the token is still valid
        """
        pass

    def test_last(self) -> None:
        """Test case for last

        Request the last UrbanDataset generated through a REQUEST / RESPONSE call
        """
        pass

    def test_login(self) -> None:
        """Test case for login

        Authenticate with the service that exposes this method through username and password, receiving in response a token that will use in subsequent calls
        """
        pass

    def test_logout(self) -> None:
        """Test case for logout

        Cancel authentication at the service that exposes this method making the token received in the previous login call invalid
        """
        pass

    def test_push(self) -> None:
        """Test case for push

        Send an UrbanDataset via the PUSH call
        """
        pass

    def test_searching(self) -> None:
        """Test case for searching

        Request an UrbanDataset through a REQUEST / RESPONSE call, providing the identifier of the resource, with a spatial-temporal refinement of the search at the context level (UrbanDataset contextualization element present in the format); with all optional parameters set to null, it achieves the same result as a basic Request
        """
        pass

    def test_searching_by_property(self) -> None:
        """Test case for searching_by_property

        Request an UrbanDataset through a REQUEST / RESPONSE call, providing the identifier of the resource, with a spatial-temporal refinement of the search at the context level (UrbanDataset contextualization element present in the format); searching among the UD properties that one is matching with the input property
        """
        pass

    def test_specific(self) -> None:
        """Test case for specific

        Request a particular UrbanDataset, through a REQUEST / RESPONSE call, providing the identifier of the resource and the specific generation timestamp
        """
        pass

    def test_test(self) -> None:
        """Test case for test

        Test the presence of the web service
        """
        pass

    def test_test_get(self) -> None:
        """Test case for test_get

        Test the presence of the web service
        """
        pass


if __name__ == '__main__':
    unittest.main()
